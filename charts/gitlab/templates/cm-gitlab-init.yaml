kind: ConfigMap
metadata:
  name:  cm-init-gitlab
  annotations:
    argocd.argoproj.io/sync-wave: "3"
apiVersion: v1
data:
  generate-root-token.sh: |
    gitlab_host="http://gitlab.gitlab.svc"
    gitlab_user="root"
    gitlab_password="openshift"

    oc get secret root-user-personal-token -n gitlab
    RESULT=$?
    if [ $RESULT -eq 0 ];
    then
        exit 0
    fi

    # curl for the login page to get a session cookie and the sources with the auth tokens
    body_header=$(curl -c cookies.txt -i "${gitlab_host}/users/sign_in" -s)

    # grep the auth token for the user login for
    #   not sure whether another token on the page will work, too - there are 3 of them
    csrf_token=$(echo $body_header | perl -ne 'print "$1\n" if /new_user.*?authenticity_token"[[:blank:]]value="(.+?)"/' | sed -n 1p)

    # send login credentials with curl, using cookies and token from previous request
    curl -b cookies.txt -c cookies.txt -i "${gitlab_host}/users/sign_in" \
        --data "user[login]=${gitlab_user}&user[password]=${gitlab_password}" \
        --data-urlencode "authenticity_token=${csrf_token}"

    # send curl GET request to personal access token page to get auth token
    body_header=$(curl -H 'user-agent: curl' -b cookies.txt -i "${gitlab_host}/profile/personal_access_tokens" -s)
    csrf_token=$(echo $body_header | perl -ne 'print "$1\n" if /authenticity_token"[[:blank:]]value="(.+?)"/' | sed -n 1p)

    # curl POST request to send the "generate personal access token form"
    # the response will be a redirect, so we have to follow using `-L`
    body_header=$(curl -L -b cookies.txt "${gitlab_host}/profile/personal_access_tokens" \
        --data-urlencode "authenticity_token=${csrf_token}" \
        --data 'personal_access_token[name]=golab-generated&personal_access_token[expires_at]=&personal_access_token[scopes][]=api')

    # Scrape the personal access token from the response HTML
    personal_access_token=$(echo $body_header | perl -ne 'print "$1\n" if /created-personal-access-token"[[:blank:]]value="(.+?)"/' | sed -n 1p)
    oc create secret generic root-user-personal-token --from-literal=token=$personal_access_token -n {{ $.Release.Namespace }}
  playblook.yaml: |
    ---
    - name: Configure GitLab
      hosts: localhost
      vars:
        gitlab_namespace: gitlab
        root_password: openshift
        user_create: true
        user_name: Lab User
        user_username: labuser
        user_password: openshift
        user_email: labuser@opentlc.com
      tasks:
        - name: Check GitLab Liveness
          ansible.builtin.uri:
            url: http://gitlab.gitlab.svc/api/v4/projects
            method: GET
          register: r_liveness
          retries: 60
          delay: 10
          until: r_liveness.status == 200

        # - name: Check that Gitlab is running
        #   pause:
        #     minutes: 5

        - name: Check GitLab Liveness (2)
          ansible.builtin.uri:
            url: http://gitlab.gitlab.svc/api/v4/projects
            method: GET
          register: r_liveness
          retries: 60
          delay: 10
          until: r_liveness.status == 200

        - name: Generate root user personal token
          shell: |
            sh /scripts/generate-root-token.sh

        - name: Retrieve Gitea instance
          kubernetes.core.k8s_info:
            api_version: v1
            kind: Secret
            name: root-user-personal-token
            namespace: '{{ "{{" }} gitlab_namespace {{ "}}" }}'
          register: r_root_token

        - name:
          debug:
            var: r_root_token

        - name: Decode root token
          set_fact:
            root_token: '{{ "{{" }} r_root_token.resources[0].data.token | b64decode {{ "}}" }}'

        - name: Create default user (admin for now)
          when: user_create
          ansible.builtin.uri:
            url: https://your.form.based.auth.example.com/index.php
            method: POST
            body_format: form-urlencoded
            body:
              admin: true
              email: '{{ "{{" }} user_email {{ "}}" }}'
              skip_confirmation: true
              username: '{{ "{{" }} user_username {{ "}}" }}'
              password: '{{ "{{" }} user_password {{ "}}" }}'
              name: '{{ "{{" }} user_name {{ "}}" }}'
            headers:
              PRIVATE-TOKEN: '{{ "{{" }} root_token {{ "}}" }}'
            status_code: 201