kind: ConfigMap
metadata:
  name:  cm-init-gitlab
  annotations:
    argocd.argoproj.io/sync-wave: "3"
apiVersion: v1
data:
  generate-root-token.sh: |
    set -x

    gitlab_host="https://{{ $.Values.gitlab.host }}"
    gitlab_user="root"
    gitlab_password="{{ $.Values.gitlab.rootPassword }}"

    oc get secret root-user-personal-token -n gitlab
    RESULT=$?
    if [ $RESULT -eq 0 ];
    then
        exit 0
    fi

    body_header=$(curl -c /tmp/cookies.txt -i "${gitlab_host}/users/sign_in" -s --insecure)

    csrf_token=$(echo $body_header | perl -ne 'print "$1\n" if /new_user.*?authenticity_token"[[:blank:]]value="(.+?)"/' | sed -n 1p)

    curl -L -b /tmp/cookies.txt -c /tmp/cookies.txt -i "${gitlab_host}/users/sign_in" \
      --data-raw "user%5Blogin%5D=${gitlab_user}&user%5Bpassword%5D=${gitlab_password}" \
      --data-urlencode "authenticity_token=${csrf_token}" \
      --compressed \
      --insecure 2>&1 > /dev/null

    body_header=$(curl -H 'user-agent: curl' -b /tmp/cookies.txt -i "${gitlab_host}/-/profile/personal_access_tokens" -s --insecure)

    csrf_token=$(echo $body_header | perl -ne 'print "$1\n" if /csrf-token"[[:blank:]]content="(.+?)"/' | sed -n 1p)

    body_header=$(curl -L -b /tmp/cookies.txt "${gitlab_host}/-/profile/personal_access_tokens" \
        --data-urlencode "authenticity_token=${csrf_token}" \
        --data 'personal_access_token[name]=golab-generated&personal_access_token[expires_at]=&personal_access_token[scopes][]=api' --insecure)

    personal_access_token=$(echo $body_header | perl -ne 'print "$1\n" if /new_token":"(.+?)"/' | sed -n 1p)

    echo $personal_access_token

    oc create secret generic root-user-personal-token --from-literal=token=$personal_access_token -n {{ $.Release.Namespace }}
  playbook.yaml: |
    ---
    - name: Configure GitLab
      hosts: localhost
      vars:
        gitlab_namespace: {{ $.Release.Namespace }}
        root_password: {{ $.Values.gitlab.rootPassword }}
        user_create: true
        user_name: {{ $.Values.gitlab.user.name }}
        user_username: {{ $.Values.gitlab.user.username }}
        user_password: {{ $.Values.gitlab.user.password }}
        user_email: {{ $.Values.gitlab.user.email }}
      tasks:
        - name: Check GitLab Liveness
          ansible.builtin.uri:
            url: https://{{ $.Values.gitlab.host }}/api/v4/projects
            method: GET
            validate_certs: false
          register: r_liveness
          retries: 60
          delay: 10
          until: r_liveness.status == 200

        - name: Wait for GitLab second restart recovery
          pause:
            minutes: 3

        - name: Check GitLab Liveness (2)
          ansible.builtin.uri:
            url: https://{{ $.Values.gitlab.host }}/api/v4/projects
            method: GET
            validate_certs: false
          register: r_liveness
          retries: 60
          delay: 10
          until: r_liveness.status == 200

        - name: Generate root user personal token
          shell: |
            sh /scripts/generate-root-token.sh

        - name: Retrieve root token
          kubernetes.core.k8s_info:
            api_version: v1
            kind: Secret
            name: root-user-personal-token
            namespace: '{{ "{{" }} gitlab_namespace {{ "}}" }}'
          register: r_root_token

        - name:
          debug:
            var: r_root_token

        - name: Decode root token
          set_fact:
            root_token: '{{ "{{" }} r_root_token.resources[0].data.token | b64decode {{ "}}" }}'

        - name: Update application settings
          when: user_create
          ansible.builtin.uri:
            url: https://{{ $.Values.gitlab.host }}/api/v4/application/settings
            method: PUT
            body_format: form-urlencoded
            body:
              import_sources: "git,github,gitea"
            headers:
              PRIVATE-TOKEN: '{{ "{{" }} root_token {{ "}}" }}'
            validate_certs: false
            status_code: 200

        - name: Create default user (admin for now)
          when: user_create
          ansible.builtin.uri:
            url: https://{{ $.Values.gitlab.host }}/api/v4/users
            method: POST
            body_format: form-urlencoded
            body:
              admin: true
              email: '{{ "{{" }} user_email {{ "}}" }}'
              skip_confirmation: true
              username: '{{ "{{" }} user_username {{ "}}" }}'
              password: '{{ "{{" }} user_password {{ "}}" }}'
              name: '{{ "{{" }} user_name {{ "}}" }}'
            headers:
              PRIVATE-TOKEN: '{{ "{{" }} root_token {{ "}}" }}'
            validate_certs: false
            status_code: 201
          ignore_errors: true
          register: r_user

{{- range $item := .Values.gitlab.groups }}

        - name: Create group
          ansible.builtin.uri:
            url: https://{{ $.Values.gitlab.host }}/api/v4/groups
            method: POST
            body_format: form-urlencoded
            body:
              name: {{ $item.name }}
              path: {{ $item.name }}
              visibility: public
            headers:
              PRIVATE-TOKEN: '{{ "{{" }} root_token {{ "}}" }}'
            validate_certs: false
            status_code: 201
          ignore_errors: true
          register: r_group

        - name: Add user to group
          ansible.builtin.uri:
            url: https://{{ $.Values.gitlab.host }}/api/v4/groups/{{ "{{" }} r_group.json.id {{ "}}" }}/members
            method: POST
            body_format: form-urlencoded
            body:
              user_id: '{{ "{{" }} r_user.json.id {{ "}}" }}'
              access_level: 50
            headers:
              PRIVATE-TOKEN: '{{ "{{" }} root_token {{ "}}" }}'
            validate_certs: false
            status_code: 201
          ignore_errors: true

        - name: Import repository to group
          ansible.builtin.uri:
            url: https://{{ $.Values.gitlab.host }}/api/v4/projects
            method: POST
            body_format: form-urlencoded
            body:
              name: '{{ "{{" }} item.name {{ "}}" }}'
              import_url: '{{ "{{" }} item.url {{ "}}" }}'
              visibility: public
              namespace_id: '{{ "{{" }} r_group.json.id {{ "}}" }}'
            headers:
              PRIVATE-TOKEN: '{{ "{{" }} root_token {{ "}}" }}'
            validate_certs: false
            status_code: 201
          ignore_errors: true
          loop:
{{- range $item1 := $item.repo }}
            - name: {{ $item1.name }}
              url: {{ $item1.url }}
{{- end }}
{{- end }}
